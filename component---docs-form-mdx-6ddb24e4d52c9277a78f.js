(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{FQGe:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return b})),t.d(n,"default",(function(){return y}));t("5hJT"),t("W1QL"),t("K/PF"),t("75LO"),t("PJhk"),t("DbwS"),t("t91x");var r=t("/FXl"),a=t("TjRS"),o=t("ZFoC"),s=t("mXGw"),u=t("MIU6"),i=t("GoQH"),m=t("LE9S"),l=t("8hsF");t("aD51");function c(){return(c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/form.mdx"}});var d={_frontmatter:b},p=a.a;function y(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(r.b)(p,c({},d,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"form"},"Form"),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{className:"language-javascript"}),"import { Form } from 'daybreak';\nimport { Validator, noError } from 'daybreak';\n")),Object(r.b)("h2",{id:"validator"},"Validator"),Object(r.b)("p",null,"Validator is used to validate whether the form data is conforms to the rules."),Object(r.b)("p",null,"Validator 用于验证表单数据是否符合规则。"),Object(r.b)("h2",{id:"noerror"},"noError"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"noError")," is a helper function to determine whether there is no errors (in other words: whether the data is an empty object). Its effect is similar to ",Object(r.b)("inlineCode",{parentName:"p"},"Lodash"),"'s ",Object(r.b)("inlineCode",{parentName:"p"},"isEmpty")," function."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"noError")," 是一个帮助函数，用于判断是否没有错误（即数据是否为空对象）。其效果类似于 ",Object(r.b)("inlineCode",{parentName:"p"},"Lodash")," 的 ",Object(r.b)("inlineCode",{parentName:"p"},"isEmpty")," 函数。"),Object(r.b)("h2",{id:"basic-usage"},"Basic usage"),Object(r.b)(o.c,{__position:0,__code:"() => {\n  function asyncCheckUserName(username, resolve, reject) {\n    setTimeout(() => {\n      if (username !== 'admin') {\n        resolve()\n      } else {\n        reject('用户名已经存在!')\n      }\n    }, 200)\n  }\n  const customValidator = username =>\n    new Promise((resolve, reject) =>\n      asyncCheckUserName(username, resolve, reject),\n    )\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n  })\n  const [errors, setErrors] = useState({})\n  const [fields] = useState([\n    { name: 'username', label: '用户名', input: { type: 'text' } },\n    { name: 'password', label: '密码', input: { type: 'password' } },\n  ])\n  const rules = [\n    { key: 'username', require: true },\n    { key: 'username', minLength: 3, maxLength: 16 },\n    { key: 'username', pattern: /^[A-Za-z0-9]+$/ },\n    { key: 'password', require: true },\n    { key: 'username', validator: customValidator },\n  ]\n  const onSubmit = () => {\n    Validator(formData, rules, errorsResult => {\n      setErrors(errorsResult)\n      if (noError(errorsResult)) {\n        Alert('表单验证通过')\n      }\n    })\n  }\n  const onChange = data => {\n    setFormData(data)\n  }\n  const buttons = (\n    <>\n      <Button mode=\"primary\" type=\"submit\">\n        提交\n      </Button>\n    </>\n  )\n  return (\n    <div>\n      <Form\n        values={formData}\n        fields={fields}\n        buttons={buttons}\n        errors={errors}\n        onSubmit={onSubmit}\n        onChange={onChange}\n      />\n    </div>\n  )\n}",__scope:{props:t,DefaultLayout:a.a,Playground:o.c,Props:o.d,useState:s.useState,Form:u.a,Validator:i.a,noError:i.b,Alert:m.a,Button:l.a},mdxType:"Playground"},(function(){var e=Object(s.useState)({username:"",password:""}),n=e[0],t=e[1],a=Object(s.useState)({}),o=a[0],c=a[1],b=Object(s.useState)([{name:"username",label:"用户名",input:{type:"text"}},{name:"password",label:"密码",input:{type:"password"}}])[0],d=[{key:"username",require:!0},{key:"username",minLength:3,maxLength:16},{key:"username",pattern:/^[A-Za-z0-9]+$/},{key:"password",require:!0},{key:"username",validator:function(e){return new Promise((function(n,t){return function(e,n,t){setTimeout((function(){"admin"!==e?n():t("用户名已经存在!")}),200)}(e,n,t)}))}}],p=Object(r.b)(React.Fragment,null,Object(r.b)(l.a,{mode:"primary",type:"submit",mdxType:"Button"},"提交"));return Object(r.b)("div",null,Object(r.b)(u.a,{values:n,fields:b,buttons:p,errors:o,onSubmit:function(){Object(i.a)(n,d,(function(e){c(e),Object(i.b)(e)&&Object(m.a)("表单验证通过")}))},onChange:function(e){t(e)},mdxType:"Form"}))})),Object(r.b)("h2",{id:"clearable"},"Clearable"),Object(r.b)("p",null,"When the value of the ",Object(r.b)("inlineCode",{parentName:"p"},"clearable")," attribute is ",Object(r.b)("inlineCode",{parentName:"p"},"true"),", you can clear the value of the current input field with one click."),Object(r.b)("p",null,"当 ",Object(r.b)("inlineCode",{parentName:"p"},"clearable")," 属性的值为 ",Object(r.b)("inlineCode",{parentName:"p"},"true")," 时，可以一键清空当前输入框的值。"),Object(r.b)(o.c,{__position:1,__code:"() => {\n  function asyncCheckUserName(username, resolve, reject) {\n    setTimeout(() => {\n      if (username !== 'admin') {\n        resolve()\n      } else {\n        reject('用户名已经存在!')\n      }\n    }, 200)\n  }\n  const customValidator = username =>\n    new Promise((resolve, reject) =>\n      asyncCheckUserName(username, resolve, reject),\n    )\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n  })\n  const [errors, setErrors] = useState({})\n  const [fields] = useState([\n    { name: 'username', label: '用户名', input: { type: 'text' } },\n    { name: 'password', label: '密码', input: { type: 'password' } },\n  ])\n  const rules = [\n    { key: 'username', require: true },\n    { key: 'username', minLength: 3, maxLength: 16 },\n    { key: 'username', pattern: /^[A-Za-z0-9]+$/ },\n    { key: 'password', require: true },\n    { key: 'username', validator: customValidator },\n  ]\n  const onSubmit = () => {\n    Validator(formData, rules, errorsResult => {\n      setErrors(errorsResult)\n      if (noError(errorsResult)) {\n        Alert('表单验证通过')\n      }\n    })\n  }\n  const onChange = data => {\n    setFormData(data)\n  }\n  const buttons = (\n    <>\n      <Button mode=\"primary\" type=\"submit\">\n        提交\n      </Button>\n    </>\n  )\n  return (\n    <div>\n      <Form\n        values={formData}\n        fields={fields}\n        buttons={buttons}\n        errors={errors}\n        onSubmit={onSubmit}\n        onChange={onChange}\n        clearable\n      />\n    </div>\n  )\n}",__scope:{props:t,DefaultLayout:a.a,Playground:o.c,Props:o.d,useState:s.useState,Form:u.a,Validator:i.a,noError:i.b,Alert:m.a,Button:l.a},mdxType:"Playground"},(function(){var e=Object(s.useState)({username:"",password:""}),n=e[0],t=e[1],a=Object(s.useState)({}),o=a[0],c=a[1],b=Object(s.useState)([{name:"username",label:"用户名",input:{type:"text"}},{name:"password",label:"密码",input:{type:"password"}}])[0],d=[{key:"username",require:!0},{key:"username",minLength:3,maxLength:16},{key:"username",pattern:/^[A-Za-z0-9]+$/},{key:"password",require:!0},{key:"username",validator:function(e){return new Promise((function(n,t){return function(e,n,t){setTimeout((function(){"admin"!==e?n():t("用户名已经存在!")}),200)}(e,n,t)}))}}],p=Object(r.b)(React.Fragment,null,Object(r.b)(l.a,{mode:"primary",type:"submit",mdxType:"Button"},"提交"));return Object(r.b)("div",null,Object(r.b)(u.a,{values:n,fields:b,buttons:p,errors:o,onSubmit:function(){Object(i.a)(n,d,(function(e){c(e),Object(i.b)(e)&&Object(m.a)("表单验证通过")}))},onChange:function(e){t(e)},clearable:!0,mdxType:"Form"}))})),Object(r.b)("h2",{id:"validate-while-inputing"},"Validate While Inputing"),Object(r.b)("p",null,"You may want you validate the form data while inputing, so you can do it with the help of ",Object(r.b)("inlineCode",{parentName:"p"},"onChange")," parameter."),Object(r.b)("p",null,"您可能希望在输入时验证表单数据，因此可以借助 ",Object(r.b)("inlineCode",{parentName:"p"},"onChange")," 参数进行验证。"),Object(r.b)(o.c,{__position:2,__code:"() => {\n  function asyncCheckUserName(username, resolve, reject) {\n    setTimeout(() => {\n      if (username !== 'admin') {\n        resolve()\n      } else {\n        reject('用户名已经存在!')\n      }\n    }, 200)\n  }\n  const customValidator = username =>\n    new Promise((resolve, reject) =>\n      asyncCheckUserName(username, resolve, reject),\n    )\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n  })\n  const [errors, setErrors] = useState({})\n  const [fields] = useState([\n    { name: 'username', label: '用户名', input: { type: 'text' } },\n    { name: 'password', label: '密码', input: { type: 'password' } },\n  ])\n  const rules = [\n    { key: 'username', require: true },\n    { key: 'username', minLength: 3, maxLength: 16 },\n    { key: 'username', pattern: /^[A-Za-z0-9]+$/ },\n    { key: 'password', require: true },\n    { key: 'username', validator: customValidator },\n  ]\n  const onSubmit = () => {\n    Validator(formData, rules, errorsResult => {\n      setErrors(errorsResult)\n      if (noError(errorsResult)) {\n        Alert('表单验证通过')\n      }\n    })\n  }\n  const onChange = data => {\n    setFormData(data)\n    Validator(data, rules, errorsResult => {\n      setErrors(errorsResult)\n    })\n  }\n  const buttons = (\n    <>\n      <Button mode=\"primary\" type=\"submit\">\n        提交\n      </Button>\n    </>\n  )\n  return (\n    <div>\n      <Form\n        values={formData}\n        fields={fields}\n        buttons={buttons}\n        errors={errors}\n        onSubmit={onSubmit}\n        onChange={onChange}\n      />\n    </div>\n  )\n}",__scope:{props:t,DefaultLayout:a.a,Playground:o.c,Props:o.d,useState:s.useState,Form:u.a,Validator:i.a,noError:i.b,Alert:m.a,Button:l.a},mdxType:"Playground"},(function(){var e=Object(s.useState)({username:"",password:""}),n=e[0],t=e[1],a=Object(s.useState)({}),o=a[0],c=a[1],b=Object(s.useState)([{name:"username",label:"用户名",input:{type:"text"}},{name:"password",label:"密码",input:{type:"password"}}])[0],d=[{key:"username",require:!0},{key:"username",minLength:3,maxLength:16},{key:"username",pattern:/^[A-Za-z0-9]+$/},{key:"password",require:!0},{key:"username",validator:function(e){return new Promise((function(n,t){return function(e,n,t){setTimeout((function(){"admin"!==e?n():t("用户名已经存在!")}),200)}(e,n,t)}))}}],p=Object(r.b)(React.Fragment,null,Object(r.b)(l.a,{mode:"primary",type:"submit",mdxType:"Button"},"提交"));return Object(r.b)("div",null,Object(r.b)(u.a,{values:n,fields:b,buttons:p,errors:o,onSubmit:function(){Object(i.a)(n,d,(function(e){c(e),Object(i.b)(e)&&Object(m.a)("表单验证通过")}))},onChange:function(e){t(e),Object(i.a)(e,d,(function(e){c(e)}))},mdxType:"Form"}))})),Object(r.b)("h2",{id:"errorsdisplaymode"},"errorsDisplayMode"),Object(r.b)("p",null,"By default, the validation result will displays only one message per field. If you want to see more than one message, you can set the value of ",Object(r.b)("inlineCode",{parentName:"p"},"errorsDisplayMode"),' property to "all".'),Object(r.b)("p",null,"默认情况下，验证结果对于每个字段只显示一条消息。如果要查看多条消息，可以将 ",Object(r.b)("inlineCode",{parentName:"p"},"errorsDisplayMode")," 属性的值设置为 ",Object(r.b)("inlineCode",{parentName:"p"},"'all'"),"。"),Object(r.b)(o.c,{__position:3,__code:"() => {\n  function asyncCheckUserName(username, resolve, reject) {\n    setTimeout(() => {\n      if (username !== 'admin') {\n        resolve()\n      } else {\n        reject('用户名已经存在!')\n      }\n    }, 200)\n  }\n  const customValidator = username =>\n    new Promise((resolve, reject) =>\n      asyncCheckUserName(username, resolve, reject),\n    )\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n  })\n  const [errors, setErrors] = useState({})\n  const [fields] = useState([\n    { name: 'username', label: '用户名', input: { type: 'text' } },\n    { name: 'password', label: '密码', input: { type: 'password' } },\n  ])\n  const rules = [\n    { key: 'username', require: true },\n    { key: 'username', minLength: 3, maxLength: 16 },\n    { key: 'username', pattern: /^[A-Za-z0-9]+$/ },\n    { key: 'password', require: true },\n    { key: 'username', validator: customValidator },\n  ]\n  const onSubmit = () => {\n    Validator(formData, rules, errorsResult => {\n      setErrors(errorsResult)\n      if (noError(errorsResult)) {\n        Alert('表单验证通过')\n      }\n    })\n  }\n  const onChange = data => {\n    setFormData(data)\n    Validator(data, rules, errorsResult => {\n      setErrors(errorsResult)\n    })\n  }\n  const buttons = (\n    <>\n      <Button mode=\"primary\" type=\"submit\">\n        提交\n      </Button>\n    </>\n  )\n  return (\n    <div>\n      <Form\n        values={formData}\n        fields={fields}\n        buttons={buttons}\n        errors={errors}\n        onSubmit={onSubmit}\n        onChange={onChange}\n        errorsDisplayMode=\"all\"\n      />\n    </div>\n  )\n}",__scope:{props:t,DefaultLayout:a.a,Playground:o.c,Props:o.d,useState:s.useState,Form:u.a,Validator:i.a,noError:i.b,Alert:m.a,Button:l.a},mdxType:"Playground"},(function(){var e=Object(s.useState)({username:"",password:""}),n=e[0],t=e[1],a=Object(s.useState)({}),o=a[0],c=a[1],b=Object(s.useState)([{name:"username",label:"用户名",input:{type:"text"}},{name:"password",label:"密码",input:{type:"password"}}])[0],d=[{key:"username",require:!0},{key:"username",minLength:3,maxLength:16},{key:"username",pattern:/^[A-Za-z0-9]+$/},{key:"password",require:!0},{key:"username",validator:function(e){return new Promise((function(n,t){return function(e,n,t){setTimeout((function(){"admin"!==e?n():t("用户名已经存在!")}),200)}(e,n,t)}))}}],p=Object(r.b)(React.Fragment,null,Object(r.b)(l.a,{mode:"primary",type:"submit",mdxType:"Button"},"提交"));return Object(r.b)("div",null,Object(r.b)(u.a,{values:n,fields:b,buttons:p,errors:o,onSubmit:function(){Object(i.a)(n,d,(function(e){c(e),Object(i.b)(e)&&Object(m.a)("表单验证通过")}))},onChange:function(e){t(e),Object(i.a)(e,d,(function(e){c(e)}))},errorsDisplayMode:"all",mdxType:"Form"}))})),Object(r.b)("h2",{id:"transformerror"},"transformError"),Object(r.b)("p",null,"By default, validation results are in English, so if you want to display errors in another language, you can set the ",Object(r.b)("inlineCode",{parentName:"p"},"transformError")," property."),Object(r.b)("p",null,"默认情况下，验证结果为英语，因此，如果要用另一种语言显示错误信息，可以设置 ",Object(r.b)("inlineCode",{parentName:"p"},"transformError")," 属性。"),Object(r.b)(o.c,{__position:4,__code:"() => {\n  function asyncCheckUserName(username, resolve, reject) {\n    setTimeout(() => {\n      if (username !== 'admin') {\n        resolve()\n      } else {\n        reject('用户名已经存在!')\n      }\n    }, 200)\n  }\n  const customValidator = username =>\n    new Promise((resolve, reject) =>\n      asyncCheckUserName(username, resolve, reject),\n    )\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n  })\n  const [errors, setErrors] = useState({})\n  const [fields] = useState([\n    { name: 'username', label: '用户名', input: { type: 'text' } },\n    { name: 'password', label: '密码', input: { type: 'password' } },\n  ])\n  const rules = [\n    { key: 'username', require: true },\n    { key: 'username', minLength: 3, maxLength: 16 },\n    { key: 'username', pattern: /^[A-Za-z0-9]+$/ },\n    { key: 'password', require: true },\n    { key: 'username', validator: customValidator },\n  ]\n  const onSubmit = () => {\n    Validator(formData, rules, errorsResult => {\n      setErrors(errorsResult)\n      if (noError(errorsResult)) {\n        Alert('表单验证通过')\n      }\n    })\n  }\n  const onChange = data => {\n    setFormData(data)\n    Validator(data, rules, errorsResult => {\n      setErrors(errorsResult)\n    })\n  }\n  const transformError = error => {\n    const errorsMap = {\n      required: '必填',\n      minLength: '太短',\n      maxLength: '太长',\n      pattern: '格式不正确',\n    }\n    return errorsMap[error]\n  }\n  const buttons = (\n    <>\n      <Button mode=\"primary\" type=\"submit\">\n        提交\n      </Button>\n    </>\n  )\n  return (\n    <div>\n      <Form\n        values={formData}\n        fields={fields}\n        buttons={buttons}\n        errors={errors}\n        onSubmit={onSubmit}\n        onChange={onChange}\n        transformError={transformError}\n      />\n    </div>\n  )\n}",__scope:{props:t,DefaultLayout:a.a,Playground:o.c,Props:o.d,useState:s.useState,Form:u.a,Validator:i.a,noError:i.b,Alert:m.a,Button:l.a},mdxType:"Playground"},(function(){var e=Object(s.useState)({username:"",password:""}),n=e[0],t=e[1],a=Object(s.useState)({}),o=a[0],c=a[1],b=Object(s.useState)([{name:"username",label:"用户名",input:{type:"text"}},{name:"password",label:"密码",input:{type:"password"}}])[0],d=[{key:"username",require:!0},{key:"username",minLength:3,maxLength:16},{key:"username",pattern:/^[A-Za-z0-9]+$/},{key:"password",require:!0},{key:"username",validator:function(e){return new Promise((function(n,t){return function(e,n,t){setTimeout((function(){"admin"!==e?n():t("用户名已经存在!")}),200)}(e,n,t)}))}}],p=Object(r.b)(React.Fragment,null,Object(r.b)(l.a,{mode:"primary",type:"submit",mdxType:"Button"},"提交"));return Object(r.b)("div",null,Object(r.b)(u.a,{values:n,fields:b,buttons:p,errors:o,onSubmit:function(){Object(i.a)(n,d,(function(e){c(e),Object(i.b)(e)&&Object(m.a)("表单验证通过")}))},onChange:function(e){t(e),Object(i.a)(e,d,(function(e){c(e)}))},transformError:function(e){return{required:"必填",minLength:"太短",maxLength:"太长",pattern:"格式不正确"}[e]},mdxType:"Form"}))})))}y&&y===Object(y)&&Object.isExtensible(y)&&!y.hasOwnProperty("__filemeta")&&Object.defineProperty(y,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/form.mdx"}}),y.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-form-mdx-6ddb24e4d52c9277a78f.js.map