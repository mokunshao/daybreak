{"version":3,"sources":["webpack:///../docs/dialog.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","useState","Playground","Props","Example","Dialog","Alert","Confirm","Modal","Button","visible","setVisible","type","onClick","buttons","onClose","closeOnClickMask","closeOnEsc","preventBackgroundScrolling","hasMask","close","isMDXComponent"],"mappings":"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","file":"component---docs-dialog-mdx-0cb9b4e4725a922dfe12.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/daybreak/daybreak/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState } from 'react';\nimport { Playground, Props } from 'docz';\nimport Example from '../site/examples/dialog.example.tsx';\nimport { Dialog, Alert, Confirm, Modal } from '../src/dialog/dialog.tsx';\nimport Button from '../src/button/button.tsx';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"dialog\"\n    }}>{`Dialog`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Dialog } from 'daybreak';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <p>{`The required parameters for `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` are `}<inlineCode parentName=\"p\">{`visible`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`onClose`}</inlineCode>{`,. You can pass the button you need to display to `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` through the buttons parameter.`}</p>\n    <p><inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` 必须的参数有 `}<inlineCode parentName=\"p\">{`visible`}</inlineCode>{` 和 `}<inlineCode parentName=\"p\">{`onClose`}</inlineCode>{`，你可以通过 buttons 参数向 `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` 传递需要展示的按钮。`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <div>\\n      <Button type=\\\"button\\\" onClick={() => setVisible(!visible)}>\\n        Open\\n      </Button>\\n      <Dialog\\n        visible={visible}\\n        buttons={[\\n          <Button type=\\\"button\\\" onClick={() => setVisible(false)}>\\n            Yes\\n          </Button>,\\n          <Button type=\\\"button\\\" onClick={() => setVisible(false)}>\\n            No\\n          </Button>,\\n        ]}\\n        onClose={() => setVisible(false)}\\n      >\\n        hello\\n      </Dialog>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      Example,\n      Dialog,\n      Alert,\n      Confirm,\n      Modal,\n      Button\n    }} mdxType=\"Playground\">\n      {() => {\n        const [visible, setVisible] = useState(false);\n        return <div>\n      <Button type=\"button\" onClick={() => setVisible(!visible)} mdxType=\"Button\">Open</Button>\n      <Dialog visible={visible} buttons={[<Button type=\"button\" onClick={() => setVisible(false)} mdxType=\"Button\">Yes</Button>, <Button type=\"button\" onClick={() => setVisible(false)} mdxType=\"Button\">No</Button>]} onClose={() => setVisible(false)} mdxType=\"Dialog\">\n        hello\n      </Dialog>\n    </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"dont-close-when-click-the-mask\"\n    }}>{`Don't Close When Click the Mask`}</h2>\n    <p>{`The default value of the parameter `}<inlineCode parentName=\"p\">{`closeOnClickMask`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`. When you set this attribute to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` will not be closed when you click on the mask layer.`}</p>\n    <p><inlineCode parentName=\"p\">{`closeOnClickMask`}</inlineCode>{` 参数的默认值为 `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`，当你把该属性设置为 `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` 时，你点击遮罩层时将不会关闭 `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{`。`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <div>\\n      <Button type=\\\"button\\\" onClick={() => setVisible(!visible)}>\\n        Open\\n      </Button>\\n      <Dialog\\n        visible={visible}\\n        buttons={[\\n          <Button type=\\\"button\\\" onClick={() => setVisible(false)}>\\n            Yes\\n          </Button>,\\n          <Button type=\\\"button\\\" onClick={() => setVisible(false)}>\\n            No\\n          </Button>,\\n        ]}\\n        onClose={() => setVisible(false)}\\n        closeOnClickMask={false}\\n      >\\n        hello\\n      </Dialog>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      Example,\n      Dialog,\n      Alert,\n      Confirm,\n      Modal,\n      Button\n    }} mdxType=\"Playground\">\n      {() => {\n        const [visible, setVisible] = useState(false);\n        return <div>\n      <Button type=\"button\" onClick={() => setVisible(!visible)} mdxType=\"Button\">Open</Button>\n      <Dialog visible={visible} buttons={[<Button type=\"button\" onClick={() => setVisible(false)} mdxType=\"Button\">Yes</Button>, <Button type=\"button\" onClick={() => setVisible(false)} mdxType=\"Button\">No</Button>]} onClose={() => setVisible(false)} closeOnClickMask={false} mdxType=\"Dialog\">\n        hello\n      </Dialog>\n    </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"dont-close-when-the-esc-key-is-pressed\"\n    }}>{`Don't Close When the 'Esc' key is pressed`}</h2>\n    <p>{`The default value of the `}<inlineCode parentName=\"p\">{`closeOnEsc`}</inlineCode>{` parameter is `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`. When you set the value of this attribute to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` will not be closed when you press the `}<inlineCode parentName=\"p\">{`ESC`}</inlineCode>{` key.`}</p>\n    <p><inlineCode parentName=\"p\">{`closeOnEsc`}</inlineCode>{` 参数的默认值为 `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`，当你把该属性的值设置为 `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` 时，你按 `}<inlineCode parentName=\"p\">{`ESC`}</inlineCode>{` 键时将不会关闭 `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{`。`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <div>\\n      <Button type=\\\"button\\\" onClick={() => setVisible(!visible)}>\\n        Open\\n      </Button>\\n      <Dialog\\n        visible={visible}\\n        buttons={[\\n          <Button type=\\\"button\\\" onClick={() => setVisible(false)}>\\n            Yes\\n          </Button>,\\n          <Button type=\\\"button\\\" onClick={() => setVisible(false)}>\\n            No\\n          </Button>,\\n        ]}\\n        onClose={() => setVisible(false)}\\n        closeOnEsc={false}\\n      >\\n        hello\\n      </Dialog>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      Example,\n      Dialog,\n      Alert,\n      Confirm,\n      Modal,\n      Button\n    }} mdxType=\"Playground\">\n      {() => {\n        const [visible, setVisible] = useState(false);\n        return <div>\n      <Button type=\"button\" onClick={() => setVisible(!visible)} mdxType=\"Button\">Open</Button>\n      <Dialog visible={visible} buttons={[<Button type=\"button\" onClick={() => setVisible(false)} mdxType=\"Button\">Yes</Button>, <Button type=\"button\" onClick={() => setVisible(false)} mdxType=\"Button\">No</Button>]} onClose={() => setVisible(false)} closeOnEsc={false} mdxType=\"Dialog\">\n        hello\n      </Dialog>\n    </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"prevent-background-scrolling\"\n    }}>{`Prevent background scrolling`}</h2>\n    <p>{`The default value of the `}<inlineCode parentName=\"p\">{`SecretentBackgroundScrolling`}</inlineCode>{` parameter is `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`. When you set the value of this attribute to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`, the page will not be scrollable when `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` is displayed.`}</p>\n    <p><inlineCode parentName=\"p\">{`preventBackgroundScrolling`}</inlineCode>{` 参数的默认值为 `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`，当你把该属性的值设置为 `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` 时，在 `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` 处于展示状态时页面将是不可滚动的。`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <div>\\n      <Button type=\\\"button\\\" onClick={() => setVisible(!visible)}>\\n        Open\\n      </Button>\\n      <Dialog\\n        visible={visible}\\n        buttons={[\\n          <Button type=\\\"button\\\" onClick={() => setVisible(false)}>\\n            Yes\\n          </Button>,\\n          <Button type=\\\"button\\\" onClick={() => setVisible(false)}>\\n            No\\n          </Button>,\\n        ]}\\n        onClose={() => setVisible(false)}\\n        preventBackgroundScrolling\\n      >\\n        hello\\n      </Dialog>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      Example,\n      Dialog,\n      Alert,\n      Confirm,\n      Modal,\n      Button\n    }} mdxType=\"Playground\">\n      {() => {\n        const [visible, setVisible] = useState(false);\n        return <div>\n      <Button type=\"button\" onClick={() => setVisible(!visible)} mdxType=\"Button\">Open</Button>\n      <Dialog visible={visible} buttons={[<Button type=\"button\" onClick={() => setVisible(false)} mdxType=\"Button\">Yes</Button>, <Button type=\"button\" onClick={() => setVisible(false)} mdxType=\"Button\">No</Button>]} onClose={() => setVisible(false)} preventBackgroundScrolling mdxType=\"Dialog\">\n        hello\n      </Dialog>\n    </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"hide-mask\"\n    }}>{`Hide Mask`}</h2>\n    <p>{`Setting the value of the `}<inlineCode parentName=\"p\">{`hasMask`}</inlineCode>{` property to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` can hide the mask layer.`}</p>\n    <p>{`将 `}<inlineCode parentName=\"p\">{`hasMask`}</inlineCode>{` 属性的值设置为 `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` 可以隐藏遮罩层。`}</p>\n    <Playground __position={4} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <div>\\n      <Button type=\\\"button\\\" onClick={() => setVisible(!visible)}>\\n        Open\\n      </Button>\\n      <Dialog\\n        visible={visible}\\n        hasMask={false}\\n        buttons={[\\n          <Button type=\\\"button\\\" onClick={() => setVisible(false)}>\\n            Yes\\n          </Button>,\\n          <Button type=\\\"button\\\" onClick={() => setVisible(false)}>\\n            No\\n          </Button>,\\n        ]}\\n        onClose={() => setVisible(false)}\\n      >\\n        hello\\n      </Dialog>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      Example,\n      Dialog,\n      Alert,\n      Confirm,\n      Modal,\n      Button\n    }} mdxType=\"Playground\">\n      {() => {\n        const [visible, setVisible] = useState(false);\n        return <div>\n      <Button type=\"button\" onClick={() => setVisible(!visible)} mdxType=\"Button\">Open</Button>\n      <Dialog visible={visible} hasMask={false} buttons={[<Button type=\"button\" onClick={() => setVisible(false)} mdxType=\"Button\">Yes</Button>, <Button type=\"button\" onClick={() => setVisible(false)} mdxType=\"Button\">No</Button>]} onClose={() => setVisible(false)} mdxType=\"Dialog\">\n        hello\n      </Dialog>\n    </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h2>\n    <p>{`You can call the `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` component through the `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` function. If you need to override the setting of `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{`, you can pass the parameters accepted by `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` through the parameter `}<inlineCode parentName=\"p\">{`override`}</inlineCode>{`.`}</p>\n    <p>{`你可以通过 `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` 函数调用 `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` 组件，如果需要覆盖 `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{` 的设置，可以通过 `}<inlineCode parentName=\"p\">{`override`}</inlineCode>{` 参数传入 `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` 接受的参数。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Modal } from 'daybreak';\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`content`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.ReactNode`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`buttons?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Array<React.ReactElement>`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onClose?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Function`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`override?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{ [k: string]: any; }`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <Playground __position={5} __code={'() => {\\n  const openModal = () => {\\n    const close = Modal(<p>This is a modal.</p>, [\\n      <Button type=\\\"button\\\" onClick={() => close()}>\\n        Close\\n      </Button>,\\n    ])\\n  }\\n  return (\\n    <Button type=\\\"button\\\" onClick={openModal}>\\n      Open\\n    </Button>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      Example,\n      Dialog,\n      Alert,\n      Confirm,\n      Modal,\n      Button\n    }} mdxType=\"Playground\">\n  {() => {\n        const openModal = () => {\n          const close = Modal(<p>This is a modal.</p>, [<Button type=\"button\" onClick={() => close()} mdxType=\"Button\">Close</Button>]);\n        };\n\n        return <Button type=\"button\" onClick={openModal} mdxType=\"Button\">Open</Button>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"alert\"\n    }}>{`Alert`}</h2>\n    <p>{`You can call the `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` component through the `}<inlineCode parentName=\"p\">{`Alert`}</inlineCode>{` function. If you need to override the setting of `}<inlineCode parentName=\"p\">{`Alert`}</inlineCode>{`, you can pass the parameters accepted by `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` through the parameter `}<inlineCode parentName=\"p\">{`override`}</inlineCode>{`.`}</p>\n    <p>{`你可以通过 `}<inlineCode parentName=\"p\">{`Alert`}</inlineCode>{` 函数调用 `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` 组件，如果需要覆盖 `}<inlineCode parentName=\"p\">{`Alert`}</inlineCode>{` 的设置，可以通过 `}<inlineCode parentName=\"p\">{`override`}</inlineCode>{` 参数传入 `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` 接受的参数。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Alert } from 'daybreak';\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`content`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.ReactNode`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`override?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{ [k: string]: any; }`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <Playground __position={6} __code={'<Button type=\\\"button\\\" onClick={() => Alert(\\'This is an alert.\\')}>\\n  Open\\n</Button>'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      Example,\n      Dialog,\n      Alert,\n      Confirm,\n      Modal,\n      Button\n    }} mdxType=\"Playground\">\n  <Button type=\"button\" onClick={() => Alert('This is an alert.')} mdxType=\"Button\">Open</Button>\n    </Playground>\n    <h2 {...{\n      \"id\": \"confirm\"\n    }}>{`Confirm`}</h2>\n    <p>{`You can call the `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` component through the `}<inlineCode parentName=\"p\">{`Confirm`}</inlineCode>{` function. If you need to override the setting of `}<inlineCode parentName=\"p\">{`Confirm`}</inlineCode>{`, you can pass the parameters accepted by `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` through the parameter `}<inlineCode parentName=\"p\">{`override`}</inlineCode>{`.`}</p>\n    <p>{`你可以通过 `}<inlineCode parentName=\"p\">{`Confirm`}</inlineCode>{` 函数调用 `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` 组件，如果需要覆盖 `}<inlineCode parentName=\"p\">{`Confirm`}</inlineCode>{` 的设置，可以通过 `}<inlineCode parentName=\"p\">{`override`}</inlineCode>{` 参数传入 `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` 接受的参数。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Confirm } from 'daybreak';\n`}</code></pre>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`param`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`content`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`React.ReactNode`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onOk?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Function`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onCancel?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`Function`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`override?`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`{ [k: string]: any; }`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <Playground __position={7} __code={'<Button type=\\\"button\\\" onClick={() => Confirm(\\'This is an confirm.\\')}>\\n  Open\\n</Button>'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      Example,\n      Dialog,\n      Alert,\n      Confirm,\n      Modal,\n      Button\n    }} mdxType=\"Playground\">\n  <Button type=\"button\" onClick={() => Confirm('This is an confirm.')} mdxType=\"Button\">Open</Button>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}