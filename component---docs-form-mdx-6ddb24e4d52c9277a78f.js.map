{"version":3,"sources":["webpack:///../docs/form.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","useState","Form","Validator","noError","Alert","Button","username","password","formData","setFormData","errors","setErrors","fields","name","label","input","type","rules","key","require","minLength","maxLength","pattern","validator","Promise","resolve","reject","setTimeout","asyncCheckUserName","buttons","mode","values","onSubmit","errorsResult","onChange","data","clearable","errorsDisplayMode","transformError","error","required","isMDXComponent"],"mappings":"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","file":"component---docs-form-mdx-6ddb24e4d52c9277a78f.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/daybreak/daybreak/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { useState } from 'react';\nimport Form from '../src/form/form.tsx';\nimport { Validator, noError } from '../src/form/validator.tsx';\nimport { Alert } from '../src/dialog/dialog.tsx';\nimport { Button } from '../src/button/button.tsx';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"form\"\n    }}>{`Form`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Form } from 'daybreak';\nimport { Validator, noError } from 'daybreak';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"validator\"\n    }}>{`Validator`}</h2>\n    <p>{`Validator is used to validate whether the form data is conforms to the rules.`}</p>\n    <p>{`Validator 用于验证表单数据是否符合规则。`}</p>\n    <h2 {...{\n      \"id\": \"noerror\"\n    }}>{`noError`}</h2>\n    <p><inlineCode parentName=\"p\">{`noError`}</inlineCode>{` is a helper function to determine whether there is no errors (in other words: whether the data is an empty object). Its effect is similar to `}<inlineCode parentName=\"p\">{`Lodash`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`isEmpty`}</inlineCode>{` function.`}</p>\n    <p><inlineCode parentName=\"p\">{`noError`}</inlineCode>{` 是一个帮助函数，用于判断是否没有错误（即数据是否为空对象）。其效果类似于 `}<inlineCode parentName=\"p\">{`Lodash`}</inlineCode>{` 的 `}<inlineCode parentName=\"p\">{`isEmpty`}</inlineCode>{` 函数。`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={0} __code={'() => {\\n  function asyncCheckUserName(username, resolve, reject) {\\n    setTimeout(() => {\\n      if (username !== \\'admin\\') {\\n        resolve()\\n      } else {\\n        reject(\\'用户名已经存在!\\')\\n      }\\n    }, 200)\\n  }\\n  const customValidator = username =>\\n    new Promise((resolve, reject) =>\\n      asyncCheckUserName(username, resolve, reject),\\n    )\\n  const [formData, setFormData] = useState({\\n    username: \\'\\',\\n    password: \\'\\',\\n  })\\n  const [errors, setErrors] = useState({})\\n  const [fields] = useState([\\n    { name: \\'username\\', label: \\'用户名\\', input: { type: \\'text\\' } },\\n    { name: \\'password\\', label: \\'密码\\', input: { type: \\'password\\' } },\\n  ])\\n  const rules = [\\n    { key: \\'username\\', require: true },\\n    { key: \\'username\\', minLength: 3, maxLength: 16 },\\n    { key: \\'username\\', pattern: /^[A-Za-z0-9]+$/ },\\n    { key: \\'password\\', require: true },\\n    { key: \\'username\\', validator: customValidator },\\n  ]\\n  const onSubmit = () => {\\n    Validator(formData, rules, errorsResult => {\\n      setErrors(errorsResult)\\n      if (noError(errorsResult)) {\\n        Alert(\\'表单验证通过\\')\\n      }\\n    })\\n  }\\n  const onChange = data => {\\n    setFormData(data)\\n  }\\n  const buttons = (\\n    <>\\n      <Button mode=\\\"primary\\\" type=\\\"submit\\\">\\n        提交\\n      </Button>\\n    </>\\n  )\\n  return (\\n    <div>\\n      <Form\\n        values={formData}\\n        fields={fields}\\n        buttons={buttons}\\n        errors={errors}\\n        onSubmit={onSubmit}\\n        onChange={onChange}\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Form,\n      Validator,\n      noError,\n      Alert,\n      Button\n    }} mdxType=\"Playground\">\n      {() => {\n        function asyncCheckUserName(username, resolve, reject) {\n          setTimeout(() => {\n            if (username !== 'admin') {\n              resolve();\n            } else {\n              reject('用户名已经存在!');\n            }\n          }, 200);\n        }\n\n        const customValidator = username => new Promise((resolve, reject) => asyncCheckUserName(username, resolve, reject));\n\n        const [formData, setFormData] = useState({\n          username: '',\n          password: ''\n        });\n        const [errors, setErrors] = useState({});\n        const [fields] = useState([{\n          name: 'username',\n          label: '用户名',\n          input: {\n            type: 'text'\n          }\n        }, {\n          name: 'password',\n          label: '密码',\n          input: {\n            type: 'password'\n          }\n        }]);\n        const rules = [{\n          key: 'username',\n          require: true\n        }, {\n          key: 'username',\n          minLength: 3,\n          maxLength: 16\n        }, {\n          key: 'username',\n          pattern: /^[A-Za-z0-9]+$/\n        }, {\n          key: 'password',\n          require: true\n        }, {\n          key: 'username',\n          validator: customValidator\n        }];\n\n        const onSubmit = () => {\n          Validator(formData, rules, errorsResult => {\n            setErrors(errorsResult);\n\n            if (noError(errorsResult)) {\n              Alert('表单验证通过');\n            }\n          });\n        };\n\n        const onChange = data => {\n          setFormData(data);\n        };\n\n        const buttons = <>\n      <Button mode=\"primary\" type=\"submit\" mdxType=\"Button\">提交</Button>\n    </>;\n        return <div>\n      <Form values={formData} fields={fields} buttons={buttons} errors={errors} onSubmit={onSubmit} onChange={onChange} mdxType=\"Form\" />\n    </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"clearable\"\n    }}>{`Clearable`}</h2>\n    <p>{`When the value of the `}<inlineCode parentName=\"p\">{`clearable`}</inlineCode>{` attribute is `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`, you can clear the value of the current input field with one click.`}</p>\n    <p>{`当 `}<inlineCode parentName=\"p\">{`clearable`}</inlineCode>{` 属性的值为 `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` 时，可以一键清空当前输入框的值。`}</p>\n    <Playground __position={1} __code={'() => {\\n  function asyncCheckUserName(username, resolve, reject) {\\n    setTimeout(() => {\\n      if (username !== \\'admin\\') {\\n        resolve()\\n      } else {\\n        reject(\\'用户名已经存在!\\')\\n      }\\n    }, 200)\\n  }\\n  const customValidator = username =>\\n    new Promise((resolve, reject) =>\\n      asyncCheckUserName(username, resolve, reject),\\n    )\\n  const [formData, setFormData] = useState({\\n    username: \\'\\',\\n    password: \\'\\',\\n  })\\n  const [errors, setErrors] = useState({})\\n  const [fields] = useState([\\n    { name: \\'username\\', label: \\'用户名\\', input: { type: \\'text\\' } },\\n    { name: \\'password\\', label: \\'密码\\', input: { type: \\'password\\' } },\\n  ])\\n  const rules = [\\n    { key: \\'username\\', require: true },\\n    { key: \\'username\\', minLength: 3, maxLength: 16 },\\n    { key: \\'username\\', pattern: /^[A-Za-z0-9]+$/ },\\n    { key: \\'password\\', require: true },\\n    { key: \\'username\\', validator: customValidator },\\n  ]\\n  const onSubmit = () => {\\n    Validator(formData, rules, errorsResult => {\\n      setErrors(errorsResult)\\n      if (noError(errorsResult)) {\\n        Alert(\\'表单验证通过\\')\\n      }\\n    })\\n  }\\n  const onChange = data => {\\n    setFormData(data)\\n  }\\n  const buttons = (\\n    <>\\n      <Button mode=\\\"primary\\\" type=\\\"submit\\\">\\n        提交\\n      </Button>\\n    </>\\n  )\\n  return (\\n    <div>\\n      <Form\\n        values={formData}\\n        fields={fields}\\n        buttons={buttons}\\n        errors={errors}\\n        onSubmit={onSubmit}\\n        onChange={onChange}\\n        clearable\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Form,\n      Validator,\n      noError,\n      Alert,\n      Button\n    }} mdxType=\"Playground\">\n      {() => {\n        function asyncCheckUserName(username, resolve, reject) {\n          setTimeout(() => {\n            if (username !== 'admin') {\n              resolve();\n            } else {\n              reject('用户名已经存在!');\n            }\n          }, 200);\n        }\n\n        const customValidator = username => new Promise((resolve, reject) => asyncCheckUserName(username, resolve, reject));\n\n        const [formData, setFormData] = useState({\n          username: '',\n          password: ''\n        });\n        const [errors, setErrors] = useState({});\n        const [fields] = useState([{\n          name: 'username',\n          label: '用户名',\n          input: {\n            type: 'text'\n          }\n        }, {\n          name: 'password',\n          label: '密码',\n          input: {\n            type: 'password'\n          }\n        }]);\n        const rules = [{\n          key: 'username',\n          require: true\n        }, {\n          key: 'username',\n          minLength: 3,\n          maxLength: 16\n        }, {\n          key: 'username',\n          pattern: /^[A-Za-z0-9]+$/\n        }, {\n          key: 'password',\n          require: true\n        }, {\n          key: 'username',\n          validator: customValidator\n        }];\n\n        const onSubmit = () => {\n          Validator(formData, rules, errorsResult => {\n            setErrors(errorsResult);\n\n            if (noError(errorsResult)) {\n              Alert('表单验证通过');\n            }\n          });\n        };\n\n        const onChange = data => {\n          setFormData(data);\n        };\n\n        const buttons = <>\n      <Button mode=\"primary\" type=\"submit\" mdxType=\"Button\">提交</Button>\n    </>;\n        return <div>\n      <Form values={formData} fields={fields} buttons={buttons} errors={errors} onSubmit={onSubmit} onChange={onChange} clearable mdxType=\"Form\" />\n    </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"validate-while-inputing\"\n    }}>{`Validate While Inputing`}</h2>\n    <p>{`You may want you validate the form data while inputing, so you can do it with the help of `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` parameter.`}</p>\n    <p>{`您可能希望在输入时验证表单数据，因此可以借助 `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` 参数进行验证。`}</p>\n    <Playground __position={2} __code={'() => {\\n  function asyncCheckUserName(username, resolve, reject) {\\n    setTimeout(() => {\\n      if (username !== \\'admin\\') {\\n        resolve()\\n      } else {\\n        reject(\\'用户名已经存在!\\')\\n      }\\n    }, 200)\\n  }\\n  const customValidator = username =>\\n    new Promise((resolve, reject) =>\\n      asyncCheckUserName(username, resolve, reject),\\n    )\\n  const [formData, setFormData] = useState({\\n    username: \\'\\',\\n    password: \\'\\',\\n  })\\n  const [errors, setErrors] = useState({})\\n  const [fields] = useState([\\n    { name: \\'username\\', label: \\'用户名\\', input: { type: \\'text\\' } },\\n    { name: \\'password\\', label: \\'密码\\', input: { type: \\'password\\' } },\\n  ])\\n  const rules = [\\n    { key: \\'username\\', require: true },\\n    { key: \\'username\\', minLength: 3, maxLength: 16 },\\n    { key: \\'username\\', pattern: /^[A-Za-z0-9]+$/ },\\n    { key: \\'password\\', require: true },\\n    { key: \\'username\\', validator: customValidator },\\n  ]\\n  const onSubmit = () => {\\n    Validator(formData, rules, errorsResult => {\\n      setErrors(errorsResult)\\n      if (noError(errorsResult)) {\\n        Alert(\\'表单验证通过\\')\\n      }\\n    })\\n  }\\n  const onChange = data => {\\n    setFormData(data)\\n    Validator(data, rules, errorsResult => {\\n      setErrors(errorsResult)\\n    })\\n  }\\n  const buttons = (\\n    <>\\n      <Button mode=\\\"primary\\\" type=\\\"submit\\\">\\n        提交\\n      </Button>\\n    </>\\n  )\\n  return (\\n    <div>\\n      <Form\\n        values={formData}\\n        fields={fields}\\n        buttons={buttons}\\n        errors={errors}\\n        onSubmit={onSubmit}\\n        onChange={onChange}\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Form,\n      Validator,\n      noError,\n      Alert,\n      Button\n    }} mdxType=\"Playground\">\n      {() => {\n        function asyncCheckUserName(username, resolve, reject) {\n          setTimeout(() => {\n            if (username !== 'admin') {\n              resolve();\n            } else {\n              reject('用户名已经存在!');\n            }\n          }, 200);\n        }\n\n        const customValidator = username => new Promise((resolve, reject) => asyncCheckUserName(username, resolve, reject));\n\n        const [formData, setFormData] = useState({\n          username: '',\n          password: ''\n        });\n        const [errors, setErrors] = useState({});\n        const [fields] = useState([{\n          name: 'username',\n          label: '用户名',\n          input: {\n            type: 'text'\n          }\n        }, {\n          name: 'password',\n          label: '密码',\n          input: {\n            type: 'password'\n          }\n        }]);\n        const rules = [{\n          key: 'username',\n          require: true\n        }, {\n          key: 'username',\n          minLength: 3,\n          maxLength: 16\n        }, {\n          key: 'username',\n          pattern: /^[A-Za-z0-9]+$/\n        }, {\n          key: 'password',\n          require: true\n        }, {\n          key: 'username',\n          validator: customValidator\n        }];\n\n        const onSubmit = () => {\n          Validator(formData, rules, errorsResult => {\n            setErrors(errorsResult);\n\n            if (noError(errorsResult)) {\n              Alert('表单验证通过');\n            }\n          });\n        };\n\n        const onChange = data => {\n          setFormData(data);\n          Validator(data, rules, errorsResult => {\n            setErrors(errorsResult);\n          });\n        };\n\n        const buttons = <>\n      <Button mode=\"primary\" type=\"submit\" mdxType=\"Button\">提交</Button>\n    </>;\n        return <div>\n      <Form values={formData} fields={fields} buttons={buttons} errors={errors} onSubmit={onSubmit} onChange={onChange} mdxType=\"Form\" />\n    </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"errorsdisplaymode\"\n    }}>{`errorsDisplayMode`}</h2>\n    <p>{`By default, the validation result will displays only one message per field. If you want to see more than one message, you can set the value of `}<inlineCode parentName=\"p\">{`errorsDisplayMode`}</inlineCode>{` property to \"all\".`}</p>\n    <p>{`默认情况下，验证结果对于每个字段只显示一条消息。如果要查看多条消息，可以将 `}<inlineCode parentName=\"p\">{`errorsDisplayMode`}</inlineCode>{` 属性的值设置为 `}<inlineCode parentName=\"p\">{`'all'`}</inlineCode>{`。`}</p>\n    <Playground __position={3} __code={'() => {\\n  function asyncCheckUserName(username, resolve, reject) {\\n    setTimeout(() => {\\n      if (username !== \\'admin\\') {\\n        resolve()\\n      } else {\\n        reject(\\'用户名已经存在!\\')\\n      }\\n    }, 200)\\n  }\\n  const customValidator = username =>\\n    new Promise((resolve, reject) =>\\n      asyncCheckUserName(username, resolve, reject),\\n    )\\n  const [formData, setFormData] = useState({\\n    username: \\'\\',\\n    password: \\'\\',\\n  })\\n  const [errors, setErrors] = useState({})\\n  const [fields] = useState([\\n    { name: \\'username\\', label: \\'用户名\\', input: { type: \\'text\\' } },\\n    { name: \\'password\\', label: \\'密码\\', input: { type: \\'password\\' } },\\n  ])\\n  const rules = [\\n    { key: \\'username\\', require: true },\\n    { key: \\'username\\', minLength: 3, maxLength: 16 },\\n    { key: \\'username\\', pattern: /^[A-Za-z0-9]+$/ },\\n    { key: \\'password\\', require: true },\\n    { key: \\'username\\', validator: customValidator },\\n  ]\\n  const onSubmit = () => {\\n    Validator(formData, rules, errorsResult => {\\n      setErrors(errorsResult)\\n      if (noError(errorsResult)) {\\n        Alert(\\'表单验证通过\\')\\n      }\\n    })\\n  }\\n  const onChange = data => {\\n    setFormData(data)\\n    Validator(data, rules, errorsResult => {\\n      setErrors(errorsResult)\\n    })\\n  }\\n  const buttons = (\\n    <>\\n      <Button mode=\\\"primary\\\" type=\\\"submit\\\">\\n        提交\\n      </Button>\\n    </>\\n  )\\n  return (\\n    <div>\\n      <Form\\n        values={formData}\\n        fields={fields}\\n        buttons={buttons}\\n        errors={errors}\\n        onSubmit={onSubmit}\\n        onChange={onChange}\\n        errorsDisplayMode=\\\"all\\\"\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Form,\n      Validator,\n      noError,\n      Alert,\n      Button\n    }} mdxType=\"Playground\">\n      {() => {\n        function asyncCheckUserName(username, resolve, reject) {\n          setTimeout(() => {\n            if (username !== 'admin') {\n              resolve();\n            } else {\n              reject('用户名已经存在!');\n            }\n          }, 200);\n        }\n\n        const customValidator = username => new Promise((resolve, reject) => asyncCheckUserName(username, resolve, reject));\n\n        const [formData, setFormData] = useState({\n          username: '',\n          password: ''\n        });\n        const [errors, setErrors] = useState({});\n        const [fields] = useState([{\n          name: 'username',\n          label: '用户名',\n          input: {\n            type: 'text'\n          }\n        }, {\n          name: 'password',\n          label: '密码',\n          input: {\n            type: 'password'\n          }\n        }]);\n        const rules = [{\n          key: 'username',\n          require: true\n        }, {\n          key: 'username',\n          minLength: 3,\n          maxLength: 16\n        }, {\n          key: 'username',\n          pattern: /^[A-Za-z0-9]+$/\n        }, {\n          key: 'password',\n          require: true\n        }, {\n          key: 'username',\n          validator: customValidator\n        }];\n\n        const onSubmit = () => {\n          Validator(formData, rules, errorsResult => {\n            setErrors(errorsResult);\n\n            if (noError(errorsResult)) {\n              Alert('表单验证通过');\n            }\n          });\n        };\n\n        const onChange = data => {\n          setFormData(data);\n          Validator(data, rules, errorsResult => {\n            setErrors(errorsResult);\n          });\n        };\n\n        const buttons = <>\n      <Button mode=\"primary\" type=\"submit\" mdxType=\"Button\">提交</Button>\n    </>;\n        return <div>\n      <Form values={formData} fields={fields} buttons={buttons} errors={errors} onSubmit={onSubmit} onChange={onChange} errorsDisplayMode=\"all\" mdxType=\"Form\" />\n    </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"transformerror\"\n    }}>{`transformError`}</h2>\n    <p>{`By default, validation results are in English, so if you want to display errors in another language, you can set the `}<inlineCode parentName=\"p\">{`transformError`}</inlineCode>{` property.`}</p>\n    <p>{`默认情况下，验证结果为英语，因此，如果要用另一种语言显示错误信息，可以设置 `}<inlineCode parentName=\"p\">{`transformError`}</inlineCode>{` 属性。`}</p>\n    <Playground __position={4} __code={'() => {\\n  function asyncCheckUserName(username, resolve, reject) {\\n    setTimeout(() => {\\n      if (username !== \\'admin\\') {\\n        resolve()\\n      } else {\\n        reject(\\'用户名已经存在!\\')\\n      }\\n    }, 200)\\n  }\\n  const customValidator = username =>\\n    new Promise((resolve, reject) =>\\n      asyncCheckUserName(username, resolve, reject),\\n    )\\n  const [formData, setFormData] = useState({\\n    username: \\'\\',\\n    password: \\'\\',\\n  })\\n  const [errors, setErrors] = useState({})\\n  const [fields] = useState([\\n    { name: \\'username\\', label: \\'用户名\\', input: { type: \\'text\\' } },\\n    { name: \\'password\\', label: \\'密码\\', input: { type: \\'password\\' } },\\n  ])\\n  const rules = [\\n    { key: \\'username\\', require: true },\\n    { key: \\'username\\', minLength: 3, maxLength: 16 },\\n    { key: \\'username\\', pattern: /^[A-Za-z0-9]+$/ },\\n    { key: \\'password\\', require: true },\\n    { key: \\'username\\', validator: customValidator },\\n  ]\\n  const onSubmit = () => {\\n    Validator(formData, rules, errorsResult => {\\n      setErrors(errorsResult)\\n      if (noError(errorsResult)) {\\n        Alert(\\'表单验证通过\\')\\n      }\\n    })\\n  }\\n  const onChange = data => {\\n    setFormData(data)\\n    Validator(data, rules, errorsResult => {\\n      setErrors(errorsResult)\\n    })\\n  }\\n  const transformError = error => {\\n    const errorsMap = {\\n      required: \\'必填\\',\\n      minLength: \\'太短\\',\\n      maxLength: \\'太长\\',\\n      pattern: \\'格式不正确\\',\\n    }\\n    return errorsMap[error]\\n  }\\n  const buttons = (\\n    <>\\n      <Button mode=\\\"primary\\\" type=\\\"submit\\\">\\n        提交\\n      </Button>\\n    </>\\n  )\\n  return (\\n    <div>\\n      <Form\\n        values={formData}\\n        fields={fields}\\n        buttons={buttons}\\n        errors={errors}\\n        onSubmit={onSubmit}\\n        onChange={onChange}\\n        transformError={transformError}\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Form,\n      Validator,\n      noError,\n      Alert,\n      Button\n    }} mdxType=\"Playground\">\n      {() => {\n        function asyncCheckUserName(username, resolve, reject) {\n          setTimeout(() => {\n            if (username !== 'admin') {\n              resolve();\n            } else {\n              reject('用户名已经存在!');\n            }\n          }, 200);\n        }\n\n        const customValidator = username => new Promise((resolve, reject) => asyncCheckUserName(username, resolve, reject));\n\n        const [formData, setFormData] = useState({\n          username: '',\n          password: ''\n        });\n        const [errors, setErrors] = useState({});\n        const [fields] = useState([{\n          name: 'username',\n          label: '用户名',\n          input: {\n            type: 'text'\n          }\n        }, {\n          name: 'password',\n          label: '密码',\n          input: {\n            type: 'password'\n          }\n        }]);\n        const rules = [{\n          key: 'username',\n          require: true\n        }, {\n          key: 'username',\n          minLength: 3,\n          maxLength: 16\n        }, {\n          key: 'username',\n          pattern: /^[A-Za-z0-9]+$/\n        }, {\n          key: 'password',\n          require: true\n        }, {\n          key: 'username',\n          validator: customValidator\n        }];\n\n        const onSubmit = () => {\n          Validator(formData, rules, errorsResult => {\n            setErrors(errorsResult);\n\n            if (noError(errorsResult)) {\n              Alert('表单验证通过');\n            }\n          });\n        };\n\n        const onChange = data => {\n          setFormData(data);\n          Validator(data, rules, errorsResult => {\n            setErrors(errorsResult);\n          });\n        };\n\n        const transformError = error => {\n          const errorsMap = {\n            required: '必填',\n            minLength: '太短',\n            maxLength: '太长',\n            pattern: '格式不正确'\n          };\n          return errorsMap[error];\n        };\n\n        const buttons = <>\n      <Button mode=\"primary\" type=\"submit\" mdxType=\"Button\">提交</Button>\n    </>;\n        return <div>\n      <Form values={formData} fields={fields} buttons={buttons} errors={errors} onSubmit={onSubmit} onChange={onChange} transformError={transformError} mdxType=\"Form\" />\n    </div>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}